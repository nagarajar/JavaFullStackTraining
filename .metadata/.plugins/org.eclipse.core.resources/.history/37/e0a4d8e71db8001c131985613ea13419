package com.in28minutes.jpa.hibernate.jpahibernate.repository;

import javax.persistence.EntityManager;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.in28minutes.jpa.hibernate.jpahibernate.entity.Course;

@Transactional
@Repository
public class CourseRepository 
{
	//In any repository class we can able to do 'talk to the EntityManager'
	
	private Logger logger = LoggerFactory.getLogger(this.getClass());
	//1. Auto wire
	@Autowired
	//2. use the below entity
	EntityManager em;
	
	//3. created methods 
	
	public Course findById(Long id)  // we can pass id then will get or retrieve the course details
	{
		return em.find(Course.class, id);
	}
	
	public Course save(Course course) // we can insert or update the course details
	{
		if(course.getId() == null){
			//insert
			em.persist(course);
		}
		else{
			//update
			em.merge(course);
		}
		
		return course;
	}
	
	// we can pass id then will delete the course details
	// Delete operation will change the database structure, its like retrieve.So Add @Transactional to avoid Errors
	public void deleteById(Long id)  
	{
		Course course = findById(id);
		em.remove(course);
	}
	
	//4. playWithEntityManager 
	public void playWithEntityManager() {
		//logger.info("playWithEntityManager - starts");
		
		Course course1 = new Course("Web services in 100 steps");
		em.persist(course1);
		Course course2 = new Course("Angular JS in 100 steps");
		em.persist(course2);
		
		// what does flush do ?
		em.flush(); //The changes which are done until than, they would be sent out to the database
		
		
		// what does detach do? 
		//em.detach(course2); // the changes that we did for course2 no long tracked after this 
		//em.detach(course1); // the changes that we did for course1 no long tracked after this
		
		// Instead of calling every time the detach method for each object, we can use clear method
		// what does clear do - it will do same thing as detach, but it will apply for everything 
		em.clear();
		
		course1.setName("Web services in 100 steps - Updated");
		em.flush();
		course2.setName("Angular JS in 100 steps - Updated");
		em.flush();
	}
}
